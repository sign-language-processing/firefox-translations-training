# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
---

loader: taskgraph.loader.transform:loader

transforms:
    - taskgraph.transforms.task_context
    - taskgraph.transforms.run:transforms
    - taskgraph.transforms.task:transforms

task-defaults:
  description: "Run tests"
  task-context:
    from-parameters:
      base_rev: base_rev
    substitution-fields:
      - run.command
  run:
    using: run-task
    cwd: '{checkout}'

tasks:
  # See issue: https://github.com/mozilla/firefox-translations-training/issues/363
  #  snakemake-dry-run:
#    # Ensure that the snakemake workflow is still executing correctly, even though
#    # taskcluster is the preferred execution environment.
#    worker-type: b-cpu
#    worker:
#      max-run-time: 3600
#      docker-image: {in-tree: test}
#    run-on-tasks-for: ["github-push", "github-pull-request"]
#    optimization:
#        skip-unless-changed:
#            - pipeline/**
#            - envs/**
#            - configs/**
#    run:
#      command:
#        - bash
#        - -c
#        - >-
#          echo "Setting environment variables"                              &&
#          export CONDA_PATH=/builds/worker/artifacts/mambaforge             &&
#          export SNAKEMAKE_OUTPUT_CACHE=/builds/worker/artifacts/mambaforge &&
#          export REPORTS=/builds/worker/artifacts/reports                   &&
#          export MODELS=/builds/worker/artifacts/models                     &&
#
#          echo "Install necessary dependencies"                             &&
#          make conda                                                        &&
#          make snakemake                                                    &&
#          make git-modules                                                  &&
#
#          echo "Start the dry run"                                          &&
#          make dry-run                                                      &&
#          make test-dry-run

  black:
    # Run python's black formatter, which formats python files.
    worker-type: b-cpu
    worker:
      max-run-time: 3600
      docker-image: {in-tree: test}
    run:
      command:
        - bash
        - -c
        - >-
            pip install poetry &&
            make black
    run-on-tasks-for: ["github-push", "github-pull-request"]

  lint:
    # Run ruff, a python linter.
    worker-type: b-cpu
    worker:
      max-run-time: 3600
      docker-image: {in-tree: test}
    run:
      command:
        - bash
        - -c
        - >-
            pip install poetry &&
            make lint
    run-on-tasks-for: ["github-push", "github-pull-request"]

  test:
    # Run unit tests
    worker-type: b-cpu
    worker:
      max-run-time: 3600
      docker-image: {in-tree: test}
    run:
      command:
        - bash
        - -c
        - >-
            pip install poetry &&
            make run-tests
    run-on-tasks-for: ["github-push", "github-pull-request"]
    optimization:
      skip-unless-changed:
        - pipeline/**
        - tests/**
        - poetry.*
        - Makefile

  taskgraph-definition:
      worker-type: b-cpu
      worker:
          docker-image: {in-tree: base}
          max-run-time: 3600
      description: "Test the full `translations_taskgraph` to validate the latest changes"
      run-on-tasks-for: ["github-push", "github-pull-request"]
      optimization:
        skip-unless-changed:
            - pipeline/**
            - taskcluster/**
      run:
          command: >-
              make validate-taskgraph

  taskgraph-diff:
      worker-type: b-cpu
      worker:
          docker-image: {in-tree: base}
          max-run-time: 1200
      description: "Create diffs of taskgraphs vs. base revision."
      run-on-tasks-for: ["github-pull-request"]
      optimization:
        skip-unless-changed:
            - taskcluster/**
      run:
          command: >-
              make diff-taskgraph BASE_REV={base_rev} OUTPUT_DIR=/builds/worker/artifacts
